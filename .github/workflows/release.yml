name: Release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

env:
  BIN_NAME: chaos-lambda-extension
  PROJECT_NAME: chaos-lambda-extension

jobs:
  build-artifacts:
    name: Build artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false 
      matrix:
        build: [x86_64-linux, aarch64-linux] 
        include:
          - build: x86_64-linux
            os: ubuntu-20.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            cross: false
          - build: aarch64-linux
            os: ubuntu-20.04
            rust: stable
            target: aarch64-unknown-linux-gnu
            cross: true
    outputs:
      target: ${{ matrix.target }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: Swatinem/rust-cache@v2
      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Install cargo lambda
        run: pip3 install cargo-lambda

      - uses: taiki-e/install-action@just
      - name: Build release binary 
        run: just build-extension release ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'x86_64-linux' 
        run: strip "./target/lambda/extensions/$BIN_NAME"

      - name: Strip release binary (arm)
        if: matrix.build == 'aarch64-linux'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:${{ matrix.target }} \
            aarch64-linux-gnu-strip \
            ./target/lambda/extensions/$BIN_NAME

      - name: Prepare Lambda extension package
        shell: bash
        run: |
          mkdir dist
          # Copy the compiled binary and the bootstrap file to dist/
          cp "./target/lambda/extensions/$BIN_NAME" "dist/"
          cp "./bootstrap" "dist/"
          cp "./chaos-lambda-extension" "dist/"  # Copy the chaos-lambda-extension document

          # Mark the bootstrap file as executable
          chmod +x dist/bootstrap

      - name: Build archive
        shell: bash
        run: |
          mkdir tmp
          mkdir dist_with_bootstrap

          mv dist/* tmp/
          mkdir dist_with_bootstrap/chaos-lambda-extension
          mv tmp/* dist_with_bootstrap/chaos-lambda-extension/

          # Ensure the 'bootstrap' is correctly included at the top level
          tar czf dist_with_bootstrap.tar.gz -C dist_with_bootstrap chaos-lambda-extension

      - uses: actions/upload-artifact@v4
        with:
          name: bins-${{ matrix.target }}
          path: dist_with_bootstrap.tar.gz

  upload-to-aws:
    name: Upload layer for ${{ matrix.region }} target ${{ matrix.target}}
    needs: [build-artifacts]
    runs-on: ubuntu-20.04
    permissions:
      id-token: write
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu]
        region: [us-west-2]  # Only push to us-west-2
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          name: bins-${{ matrix.target }}
          path: target/lambda/extensions

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}  # Use secret for AWS region
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # Use secret for role ARN
          role-session-name: GitHubActionsSession

      - uses: taiki-e/install-action@just

      - name: Upload layer to ${{ matrix.region }}
        run: |
          set -e
          just deploy-extension release ${{ matrix.region }} ${{ matrix.target }} | tee >(jq -r '.LayerArn, .Version' | (read layer; read version; just apply-global-permission-to-layer "$layer" "$version"))
  
  update-layer-readme:
    name: Update LAYERS.md
    runs-on: ubuntu-20.04
    needs: [upload-to-aws]
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0  # To get all tags
          token: ${{ secrets.UPDATE_LAYERS_SECRET }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ secrets.AWS_REGION }}  # Use secret for AWS region
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}  # Use secret for role ARN
          role-session-name: GitHubActionsSession

      - name: Update LAYERS.md with arm
        run: |
          set -e; echo "# ARM64" > LAYERS.md
          for region in $(aws ec2 describe-regions --query "Regions[].RegionName" --output text); do
            aws lambda list-layer-versions --layer-name chaos-lambda-extension-aarch64-unknown-linux-gnu-release --region $region --query 'LayerVersions[0].LayerVersionArn' --output text | tee -a LAYERS.md
            echo "" >> LAYERS.md
          done

      - name: Update LAYERS.md with X86
        run: |
          set -e; echo "# X86-64" >> LAYERS.md
          for region in $(aws ec2 describe-regions --query "Regions[].RegionName" --output text); do
            aws lambda list-layer-versions --layer-name chaos-lambda-extension-x86_64-unknown-linux-gnu-release --region $region --query 'LayerVersions[0].LayerVersionArn' --output text | tee -a LAYERS.md
            echo "" | tee -a LAYERS.md
          done

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update LAYERS.md
          file_pattern: LAYERS.md

  publish:
    name: Publish to GitHub Release
    needs: [build-artifacts]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs: 
      tagname: ${{ steps.tagname.outputs.val }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v3
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex

          rm -rf tmp
          mkdir tmp
          mkdir dist

          for dir in bins-* ; do
              platform=${dir#"bins-"}
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              mv bins-$platform/$BIN_NAME tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME
              tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
          done

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true

      - name: Extract version
        id: extract-version
        run: |
          printf "::set-output name=%s::%s\n" tag-name "${GITHUB_REF#refs/tags/}"
